From 353e9987b656128b936d64f420b2c86680138164 Mon Sep 17 00:00:00 2001
From: Min Chen <chenm003@163.com>
Date: Fri, 6 Oct 2017 17:13:44 -0500
Subject: [PATCH] [CHEN] new instruction {CiLbu, CiLhu, CiLw} that support register indirect access

---
 lib/Target/RISCV/RISCVInstrFormats.td |   15 +++++++++++++++
 lib/Target/RISCV/RISCVInstrInfo.td    |   18 ++++++++++++++++++
 2 files changed, 33 insertions(+), 0 deletions(-)

diff --git a/lib/Target/RISCV/RISCVInstrFormats.td b/lib/Target/RISCV/RISCVInstrFormats.td
index 21fefa3..d3e65ca 100644
--- a/lib/Target/RISCV/RISCVInstrFormats.td
+++ b/lib/Target/RISCV/RISCVInstrFormats.td
@@ -136,6 +136,21 @@ class FI<bits<3> funct3, bits<7> opcode, dag outs, dag ins, string asmstr, list<
   let Opcode = opcode;
 }
 
+class CiFI<bits<3> funct3, bits<7> opcode, dag outs, dag ins, string asmstr, list<dag> pattern>
+    : RISCVInst<outs, ins, asmstr, pattern, InstFormatI>
+{
+  bits<5> rs2;
+  bits<5> rs1;
+  bits<5> rd;
+
+  let Inst{31-25} = 0;
+  let Inst{24-20} = rs2;
+  let Inst{19-15} = rs1;
+  let Inst{14-12} = funct3;
+  let Inst{11-7} = rd;
+  let Opcode = opcode;
+}
+
 class FI32Shift<bit arithshift, bits<3> funct3, bits<7> opcode, dag outs, dag ins, string asmstr, list<dag> pattern>
     : RISCVInst<outs, ins, asmstr, pattern, InstFormatI>
 {
diff --git a/lib/Target/RISCV/RISCVInstrInfo.td b/lib/Target/RISCV/RISCVInstrInfo.td
index 9ece836..bd43383 100644
--- a/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/lib/Target/RISCV/RISCVInstrInfo.td
@@ -181,6 +181,15 @@ def LW   : LD_ri<0b010, "lw">;
 def LBU  : LD_ri<0b100, "lbu">;
 def LHU  : LD_ri<0b101, "lhu">;
 
+let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
+class LD_rr<bits<3> funct3, string OpcodeStr> :
+      CiFI<funct3, 0b0000011, (outs GPR:$rd), (ins GPR:$rs1, GPR:$rs2),
+         OpcodeStr#"\t$rd, [${rs1} + {$rs2}]", []>;
+
+def CiLW  : LD_rr<0b011, "CiLw">;
+def CiLHU : LD_rr<0b110, "CiLhu">;
+def CiLBU : LD_rr<0b111, "CiLbu">;
+
 // Operands for stores are in the order srcreg, base, offset rather than
 // reflecting the order these fields are specified in the instruction
 // encoding.
@@ -453,6 +462,15 @@ defm : LdPat<load, LW>, Requires<[IsRV32]>;
 defm : LdPat<zextloadi8, LBU>;
 defm : LdPat<zextloadi16, LHU>;
 
+class CiLdPat<PatFrag LoadOp, RISCVInst Inst> :
+      Pat<(LoadOp (add GPR:$rs1, GPR:$rs2)),
+            (Inst GPR:$rs1, GPR:$rs2)>;
+
+def  : CiLdPat<extloadi8, CiLBU>, Requires<[IsRV32]>;
+def  : CiLdPat<extloadi16, CiLHU>, Requires<[IsRV32]>;
+def  : CiLdPat<load, CiLW>, Requires<[IsRV32]>;
+
+
 def LdXLEN_FI : Pseudo<(outs GPR:$dst), (ins MEMii:$addr),
                    [(set GPR:$dst, (load ADDRii:$addr))]>;
 
-- 
1.7.1

