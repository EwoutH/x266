From f9ff7e801f18f318b84057530cccdcbe6ee0aa68 Mon Sep 17 00:00:00 2001
From: Min Chen <chenm003@163.com>
Date: Tue, 17 Oct 2017 19:09:11 -0500
Subject: [PATCH] [CHEN] new vector instructions 'v.ld2nx8', 'v.st2nx8'

---
 bfd/bfd-in2.h              |    2 +
 bfd/elfnn-riscv.c          |   10 +++++++
 bfd/elfxx-riscv.c          |   31 ++++++++++++++++++++++
 bfd/libbfd.h               |    2 +
 bfd/reloc.c                |    4 +++
 gas/config/tc-riscv.c      |   62 ++++++++++++++++++++++++++++++++++++++++++++
 include/elf/riscv.h        |    2 +
 include/opcode/riscv-opc.h |    6 +++-
 include/opcode/riscv.h     |   12 ++++++++
 opcodes/riscv-dis.c        |   27 +++++++++++++++++++
 opcodes/riscv-opc.c        |   12 ++++++++
 11 files changed, 169 insertions(+), 1 deletions(-)

diff --git a/bfd/bfd-in2.h b/bfd/bfd-in2.h
index d126aed..8791dae 100644
--- a/bfd/bfd-in2.h
+++ b/bfd/bfd-in2.h
@@ -4732,6 +4732,8 @@ number for the SBIC, SBIS, SBI and CBI instructions  */
   BFD_RELOC_RISCV_PCREL_LO12_S,
   BFD_RELOC_RISCV_LO12_I,
   BFD_RELOC_RISCV_LO12_S,
+  BFD_RELOC_RISCV_LO9_1_S,
+  BFD_RELOC_RISCV_LO9_D_S,
   BFD_RELOC_RISCV_GPREL12_I,
   BFD_RELOC_RISCV_GPREL12_S,
   BFD_RELOC_RISCV_TPREL_HI20,
diff --git a/bfd/elfnn-riscv.c b/bfd/elfnn-riscv.c
index 5b5fb07..7cff1ba 100644
--- a/bfd/elfnn-riscv.c
+++ b/bfd/elfnn-riscv.c
@@ -1518,6 +1518,14 @@ perform_relocation (const reloc_howto_type *howto,
       value = ENCODE_STYPE_IMM (value);
       break;
 
+    case R_RISCV_LO9_1_S:
+      value = ENCODE_VTYPE_IMM9_RS1_RS2 (value);
+      break;
+
+    case R_RISCV_LO9_D_S:
+      value = ENCODE_VTYPE_IMM9_RD_RS1 (value);
+      break;
+
     case R_RISCV_CALL:
     case R_RISCV_CALL_PLT:
       if (ARCH_SIZE > 32 && !VALID_UTYPE_IMM (RISCV_CONST_HIGH_PART (value)))
@@ -1896,6 +1904,8 @@ riscv_elf_relocate_section (bfd *output_bfd,
 	case R_RISCV_RVC_LUI:
 	case R_RISCV_LO12_I:
 	case R_RISCV_LO12_S:
+	case R_RISCV_LO9_1_S:
+	case R_RISCV_LO9_D_S:
 	case R_RISCV_SET6:
 	case R_RISCV_SET8:
 	case R_RISCV_SET16:
diff --git a/bfd/elfxx-riscv.c b/bfd/elfxx-riscv.c
index 55db392..b17d3f8 100644
--- a/bfd/elfxx-riscv.c
+++ b/bfd/elfxx-riscv.c
@@ -419,6 +419,35 @@ static reloc_howto_type howto_table[] =
 	 ENCODE_STYPE_IMM (-1U),	/* dst_mask */
 	 FALSE),			/* pcrel_offset */
 
+  /* Low 9 bits of 32-bit load & store.  */
+  HOWTO (R_RISCV_LO9_1_S,		/* type */
+	 0,				/* rightshift */
+	 2,				/* size */
+	 32,				/* bitsize */
+	 FALSE,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_dont,	/* complain_on_overflow */
+	 bfd_elf_generic_reloc,		/* special_function */
+	 "R_RISCV_LO9_1_S",		/* name */
+	 FALSE,				/* partial_inplace */
+	 0,				/* src_mask */
+	 ENCODE_VTYPE_IMM9_RS1_RS2 (-1U),/* dst_mask */
+	 FALSE),			/* pcrel_offset */
+
+  HOWTO (R_RISCV_LO9_D_S,		/* type */
+	 0,				/* rightshift */
+	 2,				/* size */
+	 32,				/* bitsize */
+	 FALSE,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_dont,	/* complain_on_overflow */
+	 bfd_elf_generic_reloc,		/* special_function */
+	 "R_RISCV_LO9_D_S",		/* name */
+	 FALSE,				/* partial_inplace */
+	 0,				/* src_mask */
+	 ENCODE_VTYPE_IMM9_RD_RS1 (-1U),/* dst_mask */
+	 FALSE),			/* pcrel_offset */
+
   /* High 20 bits of TLS LE thread pointer offset.  */
   HOWTO (R_RISCV_TPREL_HI20,		/* type */
 	 0,				/* rightshift */
@@ -917,6 +946,8 @@ static const struct elf_reloc_map riscv_reloc_map[] =
   { BFD_RELOC_RISCV_SET16, R_RISCV_SET16 },
   { BFD_RELOC_RISCV_SET32, R_RISCV_SET32 },
   { BFD_RELOC_RISCV_32_PCREL, R_RISCV_32_PCREL },
+  { BFD_RELOC_RISCV_LO9_1_S, R_RISCV_LO9_1_S },
+  { BFD_RELOC_RISCV_LO9_D_S, R_RISCV_LO9_D_S },
 };
 
 /* Given a BFD reloc type, return a howto structure.  */
diff --git a/bfd/libbfd.h b/bfd/libbfd.h
index 196e1f0..e88661f 100644
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -2175,6 +2175,8 @@ static const char *const bfd_reloc_code_real_names[] = { "@@uninitialized@@",
   "BFD_RELOC_RISCV_PCREL_LO12_S",
   "BFD_RELOC_RISCV_LO12_I",
   "BFD_RELOC_RISCV_LO12_S",
+  "BFD_RELOC_RISCV_LO9_1_S",
+  "BFD_RELOC_RISCV_LO9_D_S",
   "BFD_RELOC_RISCV_GPREL12_I",
   "BFD_RELOC_RISCV_GPREL12_S",
   "BFD_RELOC_RISCV_TPREL_HI20",
diff --git a/bfd/reloc.c b/bfd/reloc.c
index 97a17f5..d21625c 100644
--- a/bfd/reloc.c
+++ b/bfd/reloc.c
@@ -5077,6 +5077,10 @@ ENUMX
 ENUMX
   BFD_RELOC_RISCV_LO12_S
 ENUMX
+  BFD_RELOC_RISCV_LO9_1_S
+ENUMX
+  BFD_RELOC_RISCV_LO9_D_S
+ENUMX
   BFD_RELOC_RISCV_GPREL12_I
 ENUMX
   BFD_RELOC_RISCV_GPREL12_S
diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index f4276c9..822c166 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -402,6 +402,7 @@ enum reg_class
   RCLASS_GPR,
   RCLASS_FPR,
   RCLASS_CSR,
+  RCLASS_VPR,
   RCLASS_MAX
 };
 
@@ -509,6 +510,19 @@ validate_riscv_insn (const struct riscv_opcode *opc)
   while (*p)
     switch (c = *p++)
       {
+      case '^': /* Vector Extension */
+	switch (c = *p++)
+	  {
+	  case 'o': used_bits |= ENCODE_VTYPE_IMM9_RS1_RS2 (-1U); break;
+	  case 'O': used_bits |= ENCODE_VTYPE_IMM9_RD_RS1 (-1U); break;
+	  case 'd': USE_BITS (OP_MASK_RD, OP_SH_RD); break;
+	  case 't': USE_BITS (OP_MASK_RS2, OP_SH_RS2); break;
+	  default:
+	    as_bad (_("internal: bad RISC-V opcode (unknown operand type `^%c'): %s %s"),
+		    c, opc->name, opc->args);
+	    return FALSE;
+	  }
+	break;
       case 'C': /* RVC */
 	switch (c = *p++)
 	  {
@@ -641,6 +655,7 @@ md_begin (void)
   hash_reg_names (RCLASS_GPR, riscv_gpr_names_abi, NGPR);
   hash_reg_names (RCLASS_FPR, riscv_fpr_names_numeric, NFPR);
   hash_reg_names (RCLASS_FPR, riscv_fpr_names_abi, NFPR);
+  hash_reg_names (RCLASS_VPR, riscv_vpr_names_numeric, NVPR);
 
 #define DECLARE_CSR(name, num) hash_reg_name (RCLASS_CSR, #name, num);
 #include "opcode/riscv-opc.h"
@@ -1232,6 +1247,53 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
 	      error = NULL;
 	      goto out;
 
+	    case '^': /* Vector Extension */
+	      switch (*++args)
+		{
+		case 'o': /* vector type imm9 */
+		  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)
+		      || imm_expr->X_op != O_constant
+		      || !VALID_VTYPE_IMM9_RS1_RS2 (imm_expr->X_add_number))
+		    break;
+		  ip->insn_opcode |= ENCODE_VTYPE_IMM9_RS1_RS2 (imm_expr->X_add_number);
+		  goto rvc_imm_done;
+		case 'O': /* vector type imm9 */
+		  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)
+		      || imm_expr->X_op != O_constant
+		      || !VALID_VTYPE_IMM9_RD_RS1 (imm_expr->X_add_number))
+		    break;
+		  ip->insn_opcode |= ENCODE_VTYPE_IMM9_RD_RS1 (imm_expr->X_add_number);
+		  goto rvc_imm_done;
+	        case 'd':		/* Destination register.  */
+	        case 's':		/* Source register.  */
+	        case 't':		/* Target register.  */
+	          if (reg_lookup (&s, RCLASS_VPR, &regno))
+		  {
+		    c = *args;
+		    if (*s == ' ')
+		      ++s;
+
+		    /* Now that we have assembled one operand, we use the args
+		       string to figure out where it goes in the instruction.  */
+		    switch (c)
+		    {
+		    case 's':
+		      INSERT_OPERAND (RS1, *ip, regno);
+		      break;
+		    case 'd':
+		      INSERT_OPERAND (RD, *ip, regno);
+		      break;
+		    case 't':
+		      INSERT_OPERAND (RS2, *ip, regno);
+		      break;
+		    }
+		    continue;
+		  }
+		  break;
+		default:
+		  as_bad (_("bad Vector field specifier '^%c'\n"), *args);
+		}
+	      break;
 	    case 'C': /* RVC */
 	      switch (*++args)
 		{
diff --git a/include/elf/riscv.h b/include/elf/riscv.h
index eecacf8..111eaa6 100644
--- a/include/elf/riscv.h
+++ b/include/elf/riscv.h
@@ -88,6 +88,8 @@ START_RELOC_NUMBERS (elf_riscv_reloc_type)
   RELOC_NUMBER (R_RISCV_SET16, 55)
   RELOC_NUMBER (R_RISCV_SET32, 56)
   RELOC_NUMBER (R_RISCV_32_PCREL, 57)
+  RELOC_NUMBER (R_RISCV_LO9_1_S, 58)
+  RELOC_NUMBER (R_RISCV_LO9_D_S, 59)
 END_RELOC_NUMBERS (R_RISCV_max)
 
 /* Processor specific flags for the ELF header e_flags field.  */
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index b203a6a..a853009 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -1,4 +1,4 @@
-/* Automatically generated by parse-opcodes.  */
+/* Modified by Chen  */
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
 #define MATCH_SLLI_RV32 0x1013
@@ -567,6 +567,10 @@
 #define MASK_CUSTOM3_RD_RS1  0x707f
 #define MATCH_CUSTOM3_RD_RS1_RS2 0x707b
 #define MASK_CUSTOM3_RD_RS1_RS2  0x707f
+#define MATCH_V_LD2NX8 0xb
+#define MASK_V_LD2NX8 0xe00707f
+#define MATCH_V_ST2NX8 0x100b
+#define MASK_V_ST2NX8 0xe00707f
 #define CSR_FFLAGS 0x1
 #define CSR_FRM 0x2
 #define CSR_FCSR 0x3
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index 015e781..eb80edc 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -97,6 +97,10 @@ static const char * const riscv_pred_succ[16] =
   ((RV_X(x, 3, 2) << 1) | (RV_X(x, 10, 2) << 3) | (RV_X(x, 2, 1) << 5) | (RV_X(x, 5, 2) << 6) | (-RV_X(x, 12, 1) << 8))
 #define EXTRACT_RVC_J_IMM(x) \
   ((RV_X(x, 3, 3) << 1) | (RV_X(x, 11, 1) << 4) | (RV_X(x, 2, 1) << 5) | (RV_X(x, 7, 1) << 6) | (RV_X(x, 6, 1) << 7) | (RV_X(x, 9, 2) << 8) | (RV_X(x, 8, 1) << 10) | (-RV_X(x, 12, 1) << 11))
+#define EXTRACT_VTYPE_IMM9_RS1_RS2(x) \
+  (RV_X(x, 7, 5) | (RV_X(x, 28, 4) << 5) | (RV_IMM_SIGN(x) << 9))
+#define EXTRACT_VTYPE_IMM9_RD_RS1(x) \
+  (RV_X(x, 20, 5) | (RV_X(x, 28, 4) << 5) | (RV_IMM_SIGN(x) << 9))
 
 #define ENCODE_ITYPE_IMM(x) \
   (RV_X(x, 0, 12) << 20)
@@ -134,6 +138,10 @@ static const char * const riscv_pred_succ[16] =
   ((RV_X(x, 1, 2) << 3) | (RV_X(x, 3, 2) << 10) | (RV_X(x, 5, 1) << 2) | (RV_X(x, 6, 2) << 5) | (RV_X(x, 8, 1) << 12))
 #define ENCODE_RVC_J_IMM(x) \
   ((RV_X(x, 1, 3) << 3) | (RV_X(x, 4, 1) << 11) | (RV_X(x, 5, 1) << 2) | (RV_X(x, 6, 1) << 7) | (RV_X(x, 7, 1) << 6) | (RV_X(x, 8, 2) << 9) | (RV_X(x, 10, 1) << 8) | (RV_X(x, 11, 1) << 12))
+#define ENCODE_VTYPE_IMM9_RS1_RS2(x) \
+  ((RV_X(x, 0, 5) << 7) | (RV_X(x, 5, 4) << 28))
+#define ENCODE_VTYPE_IMM9_RD_RS1(x) \
+  ((RV_X(x, 0, 5) << 20) | (RV_X(x, 5, 4) << 28))
 
 #define VALID_ITYPE_IMM(x) (EXTRACT_ITYPE_IMM(ENCODE_ITYPE_IMM(x)) == (x))
 #define VALID_STYPE_IMM(x) (EXTRACT_STYPE_IMM(ENCODE_STYPE_IMM(x)) == (x))
@@ -153,6 +161,8 @@ static const char * const riscv_pred_succ[16] =
 #define VALID_RVC_SDSP_IMM(x) (EXTRACT_RVC_SDSP_IMM(ENCODE_RVC_SDSP_IMM(x)) == (x))
 #define VALID_RVC_B_IMM(x) (EXTRACT_RVC_B_IMM(ENCODE_RVC_B_IMM(x)) == (x))
 #define VALID_RVC_J_IMM(x) (EXTRACT_RVC_J_IMM(ENCODE_RVC_J_IMM(x)) == (x))
+#define VALID_VTYPE_IMM9_RS1_RS2(x) (EXTRACT_VTYPE_IMM9_RS1_RS2(ENCODE_VTYPE_IMM9_RS1_RS2(x)) == (x))
+#define VALID_VTYPE_IMM9_RD_RS1(x) (EXTRACT_VTYPE_IMM9_RD_RS1(ENCODE_VTYPE_IMM9_RD_RS1(x)) == (x))
 
 #define RISCV_RTYPE(insn, rd, rs1, rs2) \
   ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ((rs1) << OP_SH_RS1) | ((rs2) << OP_SH_RS2))
@@ -245,6 +255,7 @@ static const char * const riscv_pred_succ[16] =
 
 #define NGPR 32
 #define NFPR 32
+#define NVPR 32
 
 /* Replace bits MASK << SHIFT of STRUCT with the equivalent bits in
    VALUE << SHIFT.  VALUE is evaluated exactly once.  */
@@ -338,6 +349,7 @@ extern const char * const riscv_gpr_names_numeric[NGPR];
 extern const char * const riscv_gpr_names_abi[NGPR];
 extern const char * const riscv_fpr_names_numeric[NFPR];
 extern const char * const riscv_fpr_names_abi[NFPR];
+extern const char * const riscv_vpr_names_numeric[NGPR];
 
 extern const struct riscv_opcode riscv_opcodes[];
 
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index 17d042a..1079677 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -40,6 +40,7 @@ struct riscv_private_data
 
 static const char * const *riscv_gpr_names;
 static const char * const *riscv_fpr_names;
+static const char * const *riscv_vpr_names;
 
 /* Other options.  */
 static int no_aliases;	/* If set disassemble as most general inst.  */
@@ -49,6 +50,7 @@ set_default_riscv_dis_options (void)
 {
   riscv_gpr_names = riscv_gpr_names_abi;
   riscv_fpr_names = riscv_fpr_names_abi;
+  riscv_vpr_names = riscv_vpr_names_numeric;
   no_aliases = 0;
 }
 
@@ -61,6 +63,7 @@ parse_riscv_dis_option (const char *option)
     {
       riscv_gpr_names = riscv_gpr_names_numeric;
       riscv_fpr_names = riscv_fpr_names_numeric;
+      riscv_vpr_names = riscv_vpr_names_numeric;
     }
   else
     {
@@ -127,6 +130,30 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
     {
       switch (*d)
 	{
+	case '^': /* Vector Extension */
+	  switch (*++d)
+	    {
+	    case 'o':
+	      print (info->stream, "%d", (int)EXTRACT_VTYPE_IMM9_RS1_RS2 (l));
+	      break;
+	    case 'O':
+	      print (info->stream, "%d", (int)EXTRACT_VTYPE_IMM9_RD_RS1 (l));
+	      break;
+	    case 'd':
+	      print (info->stream, "%s",
+	      riscv_vpr_names[EXTRACT_OPERAND (RD, l)]);
+	      break;
+	    case 's':
+	      print (info->stream, "%s",
+	      riscv_vpr_names[EXTRACT_OPERAND (RS1, l)]);
+	      break;
+	    case 't':
+	      print (info->stream, "%s",
+	      riscv_vpr_names[EXTRACT_OPERAND (RS2, l)]);
+	      break;
+	    }
+	  break;
+
 	case 'C': /* RVC */
 	  switch (*++d)
 	    {
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index 27b4b9f..826287f 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -56,6 +56,13 @@ const char * const riscv_fpr_names_abi[NFPR] = {
   "fs8", "fs9", "fs10", "fs11", "ft8", "ft9", "ft10", "ft11"
 };
 
+const char * const riscv_vpr_names_numeric[NFPR] = {
+  "v0",   "v1",   "v2",   "v3",   "v4",   "v5",   "v6",   "v7",
+  "v8",   "v9",   "v10",  "v11",  "v12",  "v13",  "v14",  "v15",
+  "v16",  "v17",  "v18",  "v19",  "v20",  "v21",  "v22",  "v23",
+  "v24",  "v25",  "v26",  "v27",  "v28",  "v29",  "v30",  "v31"
+};
+
 /* The order of overloaded instructions matters.  Label arguments and
    register arguments look the same. Instructions that can have either
    for arguments must apear in the correct order in this table for the
@@ -688,6 +695,11 @@ const struct riscv_opcode riscv_opcodes[] =
 {"sfence.vma","I",   "s,t",  MATCH_SFENCE_VMA, MASK_SFENCE_VMA, match_opcode, 0 },
 {"wfi",       "I",   "",     MATCH_WFI, MASK_WFI, match_opcode, 0 },
 
+/* Chen's Vector Extension instructions */
+{"v.ld2nx8",  "I",   "^d,^O(s)",  MATCH_V_LD2NX8, MASK_V_LD2NX8, match_opcode, 0 },
+{"v.st2nx8",  "I",   "^t,^o(s)",  MATCH_V_ST2NX8, MASK_V_ST2NX8, match_opcode, 0 },
+
+
 /* Terminate the list.  */
 {0, 0, 0, 0, 0, 0, 0}
 };
-- 
1.7.1

